-- AI Insights Table for 3-Agent Generated Insights
-- This table stores sophisticated insights generated by the 3-agent AI workflow

CREATE TABLE IF NOT EXISTS ai_insights (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  meeting_id UUID NOT NULL REFERENCES meetings(id) ON DELETE CASCADE,
  
  -- Core insight content
  insight_text TEXT NOT NULL,
  context TEXT, -- Additional context about the insight
  category TEXT NOT NULL, -- high-priority, medium-priority, learning
  relevance TEXT, -- Why this insight is relevant
  
  -- AI analysis metadata
  reaction BOOLEAN DEFAULT FALSE, -- True if this insight generated a user reaction
  interest_level TEXT, -- high, medium, low
  priority TEXT NOT NULL, -- high, medium, low
  priority_reason TEXT, -- AI explanation of why this priority was assigned
  
  -- Goal alignment scores (0-10 each)
  goal_creator_brand INTEGER DEFAULT 0,
  goal_pulse_startup INTEGER DEFAULT 0, 
  goal_data_driven INTEGER DEFAULT 0,
  goal_learning_secrets INTEGER DEFAULT 0,
  goal_overall_score INTEGER DEFAULT 0,
  
  -- Flashcard tracking
  is_flashcard BOOLEAN DEFAULT FALSE, -- Has this insight been converted to a flashcard?
  flashcard_id UUID REFERENCES flashcards(id) ON DELETE SET NULL, -- Link to created flashcard
  flashcard_created_at TIMESTAMP WITH TIME ZONE, -- When flashcard was created
  
  -- Timestamps and metadata
  insight_generated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), -- When AI generated this
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_ai_insights_user_id ON ai_insights(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_insights_meeting_id ON ai_insights(meeting_id);
CREATE INDEX IF NOT EXISTS idx_ai_insights_is_flashcard ON ai_insights(is_flashcard);
CREATE INDEX IF NOT EXISTS idx_ai_insights_priority ON ai_insights(priority);
CREATE INDEX IF NOT EXISTS idx_ai_insights_goal_overall_score ON ai_insights(goal_overall_score);
CREATE INDEX IF NOT EXISTS idx_ai_insights_generated_at ON ai_insights(insight_generated_at);

-- RLS Policies
ALTER TABLE ai_insights ENABLE ROW LEVEL SECURITY;

-- Users can only access their own insights
CREATE POLICY "Users can view their own AI insights"
  ON ai_insights FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own AI insights"
  ON ai_insights FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own AI insights"
  ON ai_insights FOR UPDATE
  USING (auth.uid() = user_id);

-- Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_ai_insights_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_ai_insights_updated_at
  BEFORE UPDATE ON ai_insights
  FOR EACH ROW
  EXECUTE FUNCTION update_ai_insights_updated_at();